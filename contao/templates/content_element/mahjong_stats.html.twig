{% extends '@Contao/content_element/_base.html.twig' %}
{% trans_default_domain 'contao_default' %}

{% block content %}
    <div class="options">
        <label for="offset">{{ 'mjs.offset'|trans }}</label>
        <input x-data x-model.number="$store.graphs.numShow" type="number" step="10" min="10" name="offset" id="offset">
        <label for="recent">Recent (small)</label>
        <input x-data x-model.number="$store.graphs.numRecentSmall" type="number" min="1" name="recent" id="offset">
        <label for="recent2">Recent (big)</label>
        <input x-data x-model.number="$store.graphs.numRecentBig" type="number" step="10" min="10" name="recent2" id="offset">
    </div>
    <h3 id="anchor">Current goals</h3>
    <canvas id="chartjs"></canvas>
    <h3 id="anchor-rank">Rank</h3>
    <canvas id="chartjs-rank"></canvas>
    <h3 id="anchor-points">Points</h3>
    <canvas id="chartjs-points"></canvas>
    <h3 id="anchor-places">Places</h3>
    <canvas id="chartjs-places"></canvas>
    <h3 id="anchor-style">"Style"</h3>
    <canvas id="chartjs-style"></canvas>
    <h3 id="anchor-mega">Other</h3>
    <canvas id="chartjs-mega"></canvas>
{% endblock %}

{% block style %}
    <style>
        .mod_article.block {
            overflow: unset;
        }
        .options {
            position: sticky;
            top: 0;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            background: #fff;
        }
    </style>
{% endblock %}

{% block script %}
    <script src="/bundles/patrickjmjs/js/chart.umd.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
    document.addEventListener('alpine:init', () => {
        // helper functions
        const averager = (baseArr, propName, length) => {
            let sum = 0;
            return baseArr.map((row, i, arr) => {
                sum += parseInt(row[propName]);
                if (length > 0) {
                    if (i < length - 1) return null;
                    if (i === length - 1) return sum / length;
                    sum -= parseInt(arr[i - length][propName]);
                }
                return sum / (length || (i + 1));
            })
        }
        const rater = (baseArr, propName, value, length) => {
            let count = 0;
            return baseArr.map((row, i, arr) => {
                if (typeof value === 'function') {
                    if (value(row[propName])) {
                        count++;
                    }
                } else {
                    if (row[propName] === value)  {
                        count++
                    }
                }
                if (length > 0) {
                    if (i < length - 1) return null;
                    if (i === length - 1) return Math.round(count / length * 10000) / 100;
                    if (typeof value === 'function') {
                        if (value(arr[i - length][propName])) {
                            count--;
                        }
                    } else {
                        if (arr[i - length][propName] === value) {
                            count--
                        }
                    }
                }
                return Math.round(count / (length || (i + 1)) * 10000) / 100;
            })
        }
        const recent = (baseArr, propName, length) => {
            let count = 0;
            return baseArr.map((row, i, arr) => {
                if (!length) return row[propName];

                const oi = i - length;
                if (!arr[oi] || !arr[oi][propName] || !row[propName]) {
                    return null;
                }
                return Math.round(((row[propName] * (i + 1)) - (arr[oi][propName] * (oi + 1))) / length * 100) / 100;
            })
        }

        // lookup data & helpers
        const roomColors = {
            default: '#666666',
            bronze: '#d98d14',
            silver: '#acb3bf',
            gold: '#f2c600',
            jade: '#00b359',
            throne: '#bf2640',
        };
        const roomColor = context => roomColors[parsedData.room[context.tick.value] || 'default'];

        // statistical data
        const rawData = {{ statData|json_encode|raw }};
        let data;
        let offset;
        const parsedData = {};
        const slicedData = {};
        const parseData = (name, value) => {
            for (let field in rawData[0]) {
                if ('totalPlayed' === field || 'tstamp' === field) continue;
                if (name && ('id' === field || 'date' === field || 'room' === field || 'platform' === field || 'rank' === field || 'gameType' === field || 'exp' === field || 'maxHonba' === field || field.match(/^style/) || field.match(/^recentScore(?!_)/))) continue;
                parsedData[field + name] = recent(rawData, field, value);
            }
            parsedData['diff' + name] = parsedData['rateWin' + name].map((el, i) => {
                if (el === null) return null;
                return el - parsedData['rateDealIn' + name][i]
            })
            for (let place of [1, 2, 3, 4]) {
                parsedData['recentResult_rate' + name + '_' + place] = rater(rawData, 'recentResult', place, value);
            }
            parsedData['recentResult_avg' + name] = averager(rawData, 'recentResult', value);
            parsedData['recentScore_avg' + name] = averager(rawData, 'recentScore', value);
            parsedData['recentScore_rate' + name + '_negative'] = rater(rawData, 'recentScore', val => val < 0, value);
        }
        parseData('', 0);

        // charts
        const charts = [];
        updateCharts = () => {
            charts.forEach(el => {
                el.data.labels = slicedData.totalPlayed;
                el.data.datasets.forEach(dataset => {
                    let replacementValue = '';
                    if (dataset.label.match(/last \d+/)) {
                        const replacementType = dataset.parsedDataName.match(/(Big|Small)/);
                        if (replacementType) {
                            replacementValue = Alpine.store('graphs')['numRecent' + replacementType[0]];
                        }
                    }
                    if (replacementValue) {
                        dataset.label = dataset.label.replace(/last \d+/, 'last ' + replacementValue)
                    }
                    dataset.data = slicedData[dataset.parsedDataName];
                });
                el.update('none');
            });
        }

        // reactivity
        Alpine.store('graphs', {
            numShow: 200,
            numRecentSmall: 25,
            numRecentBig: 100,
            init() {
                Alpine.effect(() => {
                    if (this.numShow > rawData.length) {
                        this.numShow = rawData.length;
                    }
                    offset = rawData.length - this.numShow;
                    data = rawData.slice(offset);
                    parsedData['totalPlayed'] = rawData.map(row => row.totalPlayed + (row.rank ? (' (' + row.rank + ')') : ''));
                    for (const key in parsedData) {
                        slicedData[key] = parsedData[key].slice(offset)
                    }
                    updateCharts();
                })
                Alpine.effect(() => {
                    parseData('Small', this.numRecentSmall);
                    for (const key in parsedData) {
                        slicedData[key] = parsedData[key].slice(offset)
                    }
                    updateCharts();
                })
                Alpine.effect(() => {
                    parseData('Big', this.numRecentBig);
                    for (const key in parsedData) {
                        slicedData[key] = parsedData[key].slice(offset)
                    }
                    updateCharts();
                })
            }
        })

        // chart initialization
        let lastContext = undefined;
        const myChart = new Chart(document.getElementById('chartjs'), {
            type: 'line',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        label: '{{ 'tl_patrickj_mjs.rateWin.0'|trans }}',
                        parsedDataName: 'rateWin',
                        data: slicedData.rateWin,
                        borderColor: '#2a0',
                        backgroundColor: 'transparent',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateWin.0'|trans }} (last 100)',
                        parsedDataName: 'rateWinBig',
                        data: slicedData.rateWinBig,
                        borderWidth: 1,
                        borderColor: '#2a0',
                        backgroundColor: '#2a01',
                        fill: '-1',
                        segment: {
                            backgroundColor: context => {
                                return context.p1.raw >= 24 ? '#2a02' : context.p0.raw >= parseFloat(slicedData.rateWin[context.p0DataIndex]) && context.p1.raw >= parseFloat(slicedData.rateWin[context.p1DataIndex]) ? '#2a01' : context.p0.raw <= parseFloat(slicedData.rateWin[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateWin[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateWin.0'|trans }} (last 25)',
                        parsedDataName: 'rateWinSmall',
                        data: slicedData.rateWinSmall,
                        borderWidth: 1,
                        borderColor: '#2a0',
                        backgroundColor: '#2a01',
                        fill: '-2',
                        segment: {
                            backgroundColor: context => {
                                return context.p1.raw >= 24 ? '#2a02' : context.p0.raw >= parseFloat(slicedData.rateWin[context.p0DataIndex]) && context.p1.raw >= parseFloat(slicedData.rateWin[context.p1DataIndex]) ? '#2a01' : context.p0.raw <= parseFloat(slicedData.rateWin[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateWin[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                        borderDash: [3, 2],
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateDealIn.0'|trans }}',
                        parsedDataName: 'rateDealIn',
                        data: slicedData.rateDealIn,
                        borderColor: '#d20',
                        backgroundColor: 'transparent',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateDealIn.0'|trans }} (last 100)',
                        parsedDataName: 'rateDealInBig',
                        data: slicedData.rateDealInBig,
                        borderWidth: 1,
                        borderColor: '#d20',
                        backgroundColor: '#d202',
                        segment: {
                            backgroundColor: context => {
                                return context.p1.raw <= 14 ? '#d202' : context.p0.raw <= parseFloat(slicedData.rateDealIn[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateDealIn[context.p1DataIndex]) ? '#d201' : context.p0.raw <= parseFloat(slicedData.rateDealIn[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateDealIn[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                        fill: '-1',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateDealIn.0'|trans }} (last 25)',
                        parsedDataName: 'rateDealInSmall',
                        data: slicedData.rateDealInSmall,
                        borderWidth: 1,
                        borderColor: '#d20',
                        backgroundColor: '#d201',
                        segment: {
                            backgroundColor: context => {
                                return context.p1.raw <= 14 ? '#d202' : context.p0.raw <= parseFloat(slicedData.rateDealIn[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateDealIn[context.p1DataIndex]) ? '#d201' : context.p0.raw <= parseFloat(slicedData.rateDealIn[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.rateDealIn[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                        fill: '-2',
                        borderDash: [3, 2],
                    },
                    {
                        label: 'Difference',
                        parsedDataName: 'diff',
                        data: slicedData.diff,
                        borderColor: '#fc0',
                        backgroundColor: 'transparent',
                    },
                    {
                        label: 'Difference (last 100)',
                        parsedDataName: 'diffBig',
                        data: slicedData.diffBig,
                        borderWidth: 1,
                        borderColor: '#fc0',
                        backgroundColor: '#fc01',
                        segment: {
                            backgroundColor: context => {
                                if (!context.p0.skip) {
                                    lastContext = context;
                                }
                                return context.p1.raw >= 10 ? '#fc02' : (!context.p0.skip && context.p0.raw || lastContext?.p0.raw) >= parseFloat(slicedData.diff[context.p0DataIndex]) && context.p1.raw >= parseFloat(slicedData.diff[context.p1DataIndex]) ? '#fc01' : (!context.p0.skip && context.p0.raw || lastContext?.p0.raw) <= parseFloat(slicedData.diff[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.diff[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                        fill: '-1',
                    },
                    {
                        label: 'Difference (last 25)',
                        parsedDataName: 'diffSmall',
                        data: slicedData.diffSmall,
                        borderWidth: 1,
                        borderColor: '#fc0',
                        backgroundColor: '#fc01',
                        segment: {
                            backgroundColor: context => {
                                if (!context.p0.skip) {
                                    lastContext = context;
                                }
                                return context.p1.raw >= 10 ? '#fc02' : (!context.p0.skip && context.p0.raw || lastContext?.p0.raw) >= parseFloat(slicedData.diff[context.p0DataIndex]) && context.p1.raw >= parseFloat(slicedData.diff[context.p1DataIndex]) ? '#fc01' : (!context.p0.skip && context.p0.raw || lastContext?.p0.raw) <= parseFloat(slicedData.diff[context.p0DataIndex]) && context.p1.raw <= parseFloat(slicedData.diff[context.p1DataIndex]) ? '#0001' : '#0001'
                            },
                        },
                        fill: '-2',
                        borderDash: [3, 2],
                    },
                ],
            },
            options: {
                spanGaps: true,
                pointRadius: 0,
                borderWidth: 2,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                    },
                    y: {
                        suggestedMin: 13,
                        suggestedMax: 26,
                        ticks: {
                            stepSize: 1,
                        },
                        grid: {
                            color: function(context) {
                                if (context.tick.value === 10) return '#fc0';
                                if (context.tick.value === 14) return '#e40';
                                if (context.tick.value === 24) return '#3c0';
                                return '#0001';
                            },
                        },
                        afterFit: function(axis) {axis.width = 60;},
                        afterBuildTicks: axis => {
                            if (!axis.ticks.find(el => el.value === 14)) axis.ticks.push({value: 14})
                            if (!axis.ticks.find(el => el.value === 24)) axis.ticks.push({value: 24})
                            if (!axis.ticks.find(el => el.value === 25)) axis.ticks.push({value: 25})
                        },
                    },
                },
            },
        });
        charts.push(myChart);
        const rankChart = new Chart(document.getElementById('chartjs-rank'), {
            type: 'line',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        // type: 'scatter',
                        label: '{{ 'tl_patrickj_mjs.recentResult.0'|trans }}',
                        parsedDataName: 'recentResult',
                        data: slicedData.recentResult,
                        yAxisID: 'rank',
                        showLine: false,
                        pointRadius: 2,
                        borderColor: '#000',
                        backgroundColor: '#000',
                        fill: 'none',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.avgRank.0'|trans }}',
                        parsedDataName: 'avgRank',
                        data: slicedData.avgRank,
                        borderWidth: 1,
                        pointRadius: 0,
                        borderColor: '#000',
                        backgroundColor: '#0001',
                        segment: {
                            backgroundColor: context => context.p0.raw >= 2.5 && context.p1.raw >= 2.5 ? '#d201' : context.p0.raw <= 2.5 && context.p1.raw <= 2.5 ? '#2a01' : '#0001',
                        },
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.avgRank.0'|trans }} (last 100)',
                        parsedDataName: 'recentResult_avgBig',
                        data: slicedData.recentResult_avgBig,
                        borderWidth: 1,
                        pointRadius: 0,
                        borderColor: '#c8f',
                        backgroundColor: '#c8f1',
                        segment: {
                            backgroundColor: context => context.p0.raw >= 2.5 && context.p1.raw >= 2.5 ? '#d201' : context.p0.raw <= 2.5 && context.p1.raw <= 2.5 ? '#2a01' : '#0001',
                        },
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.avgRank.0'|trans }} (last 25)',
                        parsedDataName: 'recentResult_avgSmall',
                        data: slicedData.recentResult_avgSmall,
                        borderWidth: 1,
                        pointRadius: 0,
                        borderColor: '#e88',
                        borderDash: [3, 2],
                        backgroundColor: '#e881',
                        segment: {
                            backgroundColor: context => context.p0.raw >= 2.5 && context.p1.raw >= 2.5 ? '#d201' : context.p0.raw <= 2.5 && context.p1.raw <= 2.5 ? '#2a01' : '#0001',
                        },
                    },
                ],
            },
            options: {
                aspectRatio: 2.5,
                fill: {value: 2.5},
                spanGaps: true,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                    },
                    y: {
                        reverse: true,
                        grid: {
                            color: context => {
                                if (context.tick.value === 2.5) return '#aaa';
                                return '#0001';
                            }
                        },
                        afterDataLimits: (context) => {
                            const offset = Math.max(Math.abs(2.5 - context.min), Math.abs(2.5 - context.max));
                            context.min = 2.5 - offset;
                            context.max = 2.5 + offset;
                        },
                        afterBuildTicks: axis => {
                            if (!axis.ticks.find(el => el.value === 2.5)) axis.ticks.push({value: 2.5})
                        },
                        afterFit: function(axis) {axis.width = 35;},
                    },
                    rank: {
                        axis: 'y',
                        grid: {
                            drawOnChartArea: false,
                        },
                        min: 1,
                        max: 4,
                        reverse: true,
                        ticks: {
                            count: 4,
                        },
                        afterFit: function(axis) {axis.width = 25;},
                    },
                },
            },
        });
        charts.push(rankChart);
        const pointsChart = new Chart(document.getElementById('chartjs-points'), {
            type: 'bar',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        label: '{{ 'tl_patrickj_mjs.recentScoreFourth.0'|trans }}',
                        parsedDataName: 'recentScoreFourth',
                        data: slicedData.recentScoreFourth,
                        borderWidth: 1,
                        borderColor: '#d20',
                        backgroundColor: '#d20',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.recentScoreThird.0'|trans }}',
                        parsedDataName: 'recentScoreThird',
                        data: slicedData.recentScoreThird,
                        borderWidth: 1,
                        borderColor: '#f80',
                        backgroundColor: '#f80',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.recentScoreSecond.0'|trans }}',
                        parsedDataName: 'recentScoreSecond',
                        data: slicedData.recentScoreSecond,
                        borderWidth: 1,
                        borderColor: '#dd0',
                        backgroundColor: '#dd0',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.recentScoreFirst.0'|trans }}',
                        parsedDataName: 'recentScoreFirst',
                        data: slicedData.recentScoreFirst,
                        borderWidth: 1,
                        borderColor: '#2a0',
                        backgroundColor: '#2a0',
                    },
                    {
                        type: 'line',
                        label: '{{ 'tl_patrickj_mjs.recentScore.0'|trans }}',
                        parsedDataName: 'recentScore',
                        data: slicedData.recentScore,
                        borderWidth: 1,
                        pointRadius: 2,
                        borderColor: '#000',
                        backgroundColor: '#fff',
                        order: -1,
                        fill: false,
                        showLine: false,
                    },
                    {
                        type: 'line',
                        label: '{{ 'tl_patrickj_mjs.avgScore.0'|trans }}',
                        parsedDataName: 'recentScore_avg',
                        data: slicedData.recentScore_avg,
                        borderWidth: 1,
                        pointRadius: 0,
                        borderColor: '#000',
                        backgroundColor: 'transparent',
                        order: -1,
                        fill: false,
                    },
                    {
                        type: 'line',
                        label: '{{ 'tl_patrickj_mjs.avgScore.0'|trans }} (last 100)',
                        parsedDataName: 'recentScore_avgBig',
                        data: slicedData.recentScore_avgBig,
                        borderWidth: 1,
                        pointRadius: 0,
                        borderColor: '#fff',
                        backgroundColor: 'transparent',
                        order: -2,
                        fill: false,
                    },
                ],
            },
            options: {
                categoryPercentage: 1,
                fill: true,
                pointBorderColor: '#666',
                spanGaps: true,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                        stacked: true,
                    },
                    y: {
                        ticks: {
                            stepSize: 10000,
                        },
                        grid: {
                            color: context => {
                                if (context.tick.value === 25000) return '#0005';
                                return '#0001';
                            }
                        },
                        afterBuildTicks: axis => {
                            if (!axis.ticks.find(el => el.value === 25000)) axis.ticks.push({value: 25000})
                        },
                        afterFit: function(axis) {axis.width = 60;},
                    },
                },
            },
        });
        charts.push(pointsChart);
        const placesChart = new Chart(document.getElementById('chartjs-places'), {
            type: 'line',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFourth.0'|trans }}',
                        parsedDataName: 'rateFourth',
                        data: slicedData.rateFourth,
                        borderWidth: 1,
                        borderColor: '#d20',
                        backgroundColor: '#d20',
                        fill: 'start',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateThird.0'|trans }}',
                        parsedDataName: 'rateThird',
                        data: slicedData.rateThird,
                        borderWidth: 1,
                        borderColor: '#f80',
                        backgroundColor: '#f80',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateSecond.0'|trans }}',
                        parsedDataName: 'rateSecond',
                        data: slicedData.rateSecond,
                        borderWidth: 1,
                        borderColor: '#dd0',
                        backgroundColor: '#dd0',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFirst.0'|trans }}',
                        parsedDataName: 'rateFirst',
                        data: slicedData.rateFirst,
                        borderWidth: 1,
                        borderColor: '#2a0',
                        backgroundColor: '#2a0',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateNegative.0'|trans }}',
                        parsedDataName: 'rateNegative',
                        data: slicedData.rateNegative,
                        borderWidth: 1,
                        borderColor: '#0004',
                        backgroundColor: '#0004',
                        fill: 'start',
                        stack: 'unstacked',
                        order: -5,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFourth.0'|trans }} (last 100)',
                        parsedDataName: 'recentResult_rateBig_4',
                        data: slicedData.recentResult_rateBig_4,
                        borderWidth: 1,
                        borderColor: '#000',
                        backgroundColor: '#b204',
                        stack: 'lastBig',
                        order: -10,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateThird.0'|trans }} (last 100)',
                        parsedDataName: 'recentResult_rateBig_3',
                        data: slicedData.recentResult_rateBig_3,
                        borderWidth: 1,
                        borderColor: '#000',
                        backgroundColor: '#f804',
                        stack: 'lastBig',
                        order: -10,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateSecond.0'|trans }} (last 100)',
                        parsedDataName: 'recentResult_rateBig_2',
                        data: slicedData.recentResult_rateBig_2,
                        borderWidth: 1,
                        borderColor: '#000',
                        backgroundColor: '#dd04',
                        stack: 'lastBig',
                        order: -10,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFirst.0'|trans }} (last 100)',
                        parsedDataName: 'recentResult_rateBig_1',
                        data: slicedData.recentResult_rateBig_1,
                        borderWidth: 1,
                        borderColor: '#000',
                        backgroundColor: '#2804',
                        stack: 'lastBig',
                        order: -10,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateNegative.0'|trans }} (last 100)',
                        parsedDataName: 'recentScore_rateBig_negative',
                        data: slicedData.recentScore_rateBig_negative,
                        borderWidth: 1,
                        borderColor: '#000',
                        backgroundColor: '#0002',
                        fill: 'start',
                        stack: 'lastBigunstacked',
                        order: -15,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFourth.0'|trans }} (last 25)',
                        parsedDataName: 'recentResult_rateSmall_4',
                        data: slicedData.recentResult_rateSmall_4,
                        borderWidth: 1,
                        borderColor: '#fff',
                        borderDash: [3, 2],
                        backgroundColor: 'transparent',
                        fill: 'start',
                        stack: 'lastSmall',
                        order: -20,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateThird.0'|trans }} (last 25)',
                        parsedDataName: 'recentResult_rateSmall_3',
                        data: slicedData.recentResult_rateSmall_3,
                        borderWidth: 1,
                        borderColor: '#fff',
                        borderDash: [3, 2],
                        backgroundColor: 'transparent',
                        stack: 'lastSmall',
                        order: -20,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateSecond.0'|trans }} (last 25)',
                        parsedDataName: 'recentResult_rateSmall_2',
                        data: slicedData.recentResult_rateSmall_2,
                        borderWidth: 1,
                        borderColor: '#fff',
                        borderDash: [3, 2],
                        backgroundColor: 'transparent',
                        stack: 'lastSmall',
                        order: -20,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateFirst.0'|trans }} (last 25)',
                        parsedDataName: 'recentResult_rateSmall_1',
                        data: slicedData.recentResult_rateSmall_1,
                        borderWidth: 1,
                        borderColor: '#fff',
                        borderDash: [3, 2],
                        backgroundColor: 'transparent',
                        stack: 'lastSmall',
                        order: -20,
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateNegative.0'|trans }} (last 25)',
                        parsedDataName: 'recentScore_rateSmall_negative',
                        data: slicedData.recentScore_rateSmall_negative,
                        borderWidth: 1,
                        borderColor: '#fff',
                        borderDash: [3, 2],
                        backgroundColor: 'transparent',
                        stack: 'lastSmall_unstacked',
                        order: -25,
                    },
                ],
            },
            options: {
                aspectRatio: 3,
                fill: '-1',
                spanGaps: true,
                pointRadius: 0,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                    },
                    y: {
                        stacked: true,
                        min: 0,
                        max: 100,
                        ticks: {
                            count: 5,
                        },
                        grid: {
                            z: 1,
                        },
                        afterFit: function(axis) {axis.width = 60;},
                    },
                },
            },
        });
        charts.push(placesChart);
        const styleChart = new Chart(document.getElementById('chartjs-style'), {
            type: 'line',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        label: '{{ 'tl_patrickj_mjs.styleAtk.0'|trans }}',
                        parsedDataName: 'styleAtk',
                        data: slicedData.styleAtk,
                        borderWidth: 1,
                        backgroundColor: '#e63a89',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.styleDef.0'|trans }}',
                        parsedDataName: 'styleDef',
                        data: slicedData.styleDef,
                        borderWidth: 1,
                        backgroundColor: '#71e39c',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.styleSpd.0'|trans }}',
                        parsedDataName: 'styleSpd',
                        data: slicedData.styleSpd,
                        borderWidth: 1,
                        backgroundColor: '#65ccd3',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.styleLuk.0'|trans }}',
                        parsedDataName: 'styleLuk',
                        data: slicedData.styleLuk,
                        borderWidth: 1,
                        backgroundColor: '#ae8152',
                    },
                ],
            },
            options: {
                aspectRatio: 4,
                fill: true,
                spanGaps: true,
                pointRadius: 0,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                    },
                    y: {
                        stacked: true,
                        min: 0,
                        afterFit: function(axis) {axis.width = 60;},
                    },
                },
            },
        });
        charts.push(styleChart);
        const megaChart = new Chart(document.getElementById('chartjs-mega'), {
            type: 'line',
            data: {
                labels: slicedData.totalPlayed,
                datasets: [
                    {
                        label: '{{ 'tl_patrickj_mjs.avgScore.0'|trans }}',
                        parsedDataName: 'avgScore',
                        data: slicedData.avgScore,
                        yAxisID: 'score',
                        borderColor: '#d608',
                        pointRadius: 2,
                        borderWidth: 1,
                        cubicInterpolationMode: 'monotone',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.maxHonba.0'|trans }}',
                        parsedDataName: 'maxHonba',
                        data: slicedData.maxHonba,
                        stepped: true,
                        borderColor: '#da0',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.avgTurns.0'|trans }}',
                        parsedDataName: 'avgTurns',
                        data: slicedData.avgTurns,
                        borderColor: '#ed0',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.avgTurns.0'|trans }} (last 100)',
                        parsedDataName: 'avgTurnsBig',
                        data: slicedData.avgTurnsBig,
                        borderWidth: 1,
                        borderColor: '#ed0',
                        fill: '-1',
                        backgroundColor: '#ed01'
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateTsumo.0'|trans }}',
                        parsedDataName: 'rateTsumo',
                        data: slicedData.rateTsumo,
                        borderColor: '#a4d',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateTsumo.0'|trans }} (last 100)',
                        parsedDataName: 'rateTsumoBig',
                        data: slicedData.rateTsumoBig,
                        borderWidth: 1,
                        borderColor: '#a4d',
                        fill: '-1',
                        backgroundColor: '#a4d1'
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateCall.0'|trans }}',
                        parsedDataName: 'rateCall',
                        data: slicedData.rateCall,
                        borderColor: '#0d2',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateCall.0'|trans }} (last 100)',
                        parsedDataName: 'rateCallBig',
                        data: slicedData.rateCallBig,
                        borderWidth: 1,
                        borderColor: '#0d2',
                        fill: '-1',
                        backgroundColor: '#0d21'
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateRiichi.0'|trans }}',
                        parsedDataName: 'rateRiichi',
                        data: slicedData.rateRiichi,
                        borderColor: '#7bd',
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.rateRiichi.0'|trans }} (last 100)',
                        parsedDataName: 'rateRiichiBig',
                        data: slicedData.rateRiichiBig,
                        borderWidth: 1,
                        borderColor: '#7bd',
                        fill: '-1',
                        backgroundColor: '#7bd1'
                    },
                    {
                        label: '{{ 'tl_patrickj_mjs.exp.0'|trans }}',
                        parsedDataName: 'exp',
                        data: slicedData.exp,
                        yAxisID: 'exp',
                        borderColor: '#8888',
                        pointRadius: 2,
                        borderWidth: 1,
                        cubicInterpolationMode: 'monotone',
                    },
                ],
            },
            options: {
                backgroundColor: 'transparent',
                pointRadius: 0,
                borderWidth: 2,
                spanGaps: true,
                scales: {
                    x: {
                        ticks: {
                            color: roomColor,
                        },
                    },
                    y: {
                    },
                    score: {
                        axis: 'y',
                        ticks: {
                            stepSize: 100,
                        },
                        afterBuildTicks: axis => {
                            if (!axis.ticks.find(el => el.value === 6000)) axis.ticks.push({value: 6000})
                        },
                    },
                    exp: {
                        axis: 'y',
                    },
                },
            },
        });
        charts.push(megaChart);
    });

        document.querySelectorAll('[id^="anchor"]').forEach(el => el.addEventListener('click', e => window.location.hash = e.target.id.replace('anchor', 'chartjs')))
    </script>
{% endblock %}
